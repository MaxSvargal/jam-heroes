package BattleForCreepsCamp

import Battle
import BattleArea
import CreepCamp
import CreepsGroup
import MapState
import PlayerInstance
import DropTables
import DropTable
import GuardUnitsRelations

public class BattleForCreepsCamp extends Battle
	construct(CreepCamp creepCamp, BattleArea battleArea)
		super(creepCamp, battleArea)
		// TODO: does not needed? one way binding?
		getEntityBattleFor().setCurrentBattle(this)

	override function creepsDefeat(PlayerInstance p)
		let creepCamp = getEntityBattleFor() castTo CreepCamp
		if creepCamp.getBattleGroup().getUnitOnMap() != null
			creepCamp.getBattleGroup().getUnitOnMap().remove()
		creepCamp.setCurrentBattle(null)
		mapState.addCreepCampToRestoreQueue(creepCamp)
		dropRewardItems(p.castleHeroPoint, p.heroOnMap.getPos())

	override function creepsVictory()
		getEntityBattleFor().setCurrentBattle(null)

	// TODO: Move to other class?
	function dropRewardItems(vec2 castlePos, vec2 onMapPos)
		let lvl = mapState.getIncreasedLevel().toInt()
		let dtg = new DropTableGenerator(lvl)
		dtg.getDropTable().dropRandomItemAtPos(castlePos)
		destroy dtg

		let creepsGroup = getEntityBattleFor().getBattleGroup() castTo CreepsGroup
		let warlordId = creepsGroup.getWarlordId()
		if unitIdToGuardRelations.has(warlordId)
			let guardItemId = unitIdToGuardRelations.get(warlordId)
			let dtgg = new DropTable()
				..addDropNothing()
				..addDropNothing()
				..addDropItem(guardItemId)
				..dropRandomItemAtPos(onMapPos)
			destroy dtgg


