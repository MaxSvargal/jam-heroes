package GlobalMapController

import ClosureTimers
import HashMap
import ClosureEvents

import CreepCamp
import CreepsGroup
import GuardsGroup
import BattleForCreepsCamp
import BattleForIncomeBuilding
import BattleAreas
import MapState
import IncomeBuilding
import BattlesController
import Players
import EntityBattleFor
import BattleGroup
import Treasure
import TreasureChooseRewardDialog

import CreepDefenceUpgrade
import CreepDamageUpgrade
import CreepHPUpgrade
import IncomeGoldMine
import IncomeCamp

import InitGlobalMapEntities

// TODO: replace with map bounds
// public let topOfMap = vec2(-3500, 4400)
// public let bottomOfMap = vec2(-3500, -14900)

public class GlobalMapController
	HashMap<unit, CreepCamp> creepCamps
	HashMap<unit, IncomeBuilding> incomeBuildings
	BattlesController battlesController

	construct()
		let initialState = new InitGlobalMapEntities()
			..createCreepCamps()
			..createBossesCamps()
			..createIncomeGoldMineBuildings()
			..createIncomeCampsBuildings()

		creepCamps = initialState.creepCamps
		incomeBuildings = initialState.incomeBuildings
		
		battlesController = new BattlesController()

		listenForCreepCampAttack()
		listenForIncomeBuildingAttack()
		restoreCampsIterator()
		giveIncomeIterator()
		initialCreateMapItems()
		listenForGettingItems()

	function listenForCreepCampAttack()
		EventListener.add(EVENT_PLAYER_UNIT_ATTACKED) ->
			if creepCamps.has(GetAttacker())
				let enterPlayer = GetAttackedUnitBJ().getOwner()
				let creepCamp = creepCamps.get(GetAttacker())

				if creepCamp.getCurrentBattle() != null
					creepCamp.getCurrentBattle().enterPlayerIntoBattle(enterPlayer)
				else
					let battleArea = getRandomBattleArea()
					let battle = new BattleForCreepsCamp(creepCamp, battleArea)
					// TODO: make more groups on more spots throught battleArea
					creepCamp.getBattleGroup().createGroupAtRect(battleArea.enemiesStartPoint.withRadiusRect(300))
					battlesController.add(battle)
					battle.enterPlayerIntoBattle(enterPlayer)

	function listenForIncomeBuildingAttack()	
		EventListener.add(EVENT_PLAYER_UNIT_ATTACKED) ->
			if incomeBuildings.has(GetAttackedUnitBJ())
				let enterPlayer = GetAttacker().getOwner()
				let incomeBuilding = incomeBuildings.get(GetAttackedUnitBJ())

				if incomeBuilding.getCurrentBattle() != null
					incomeBuilding.getCurrentBattle().enterPlayerIntoBattle(enterPlayer)
				else
					BattleGroup battleGroup
					if incomeBuilding.getBuilding().getOwner() == players[PLAYER_NEUTRAL_AGGRESSIVE]
						let pos = incomeBuilding.getPos()
						let lvl = InitGlobalMapEntities.getLevelByDistance(pos)
						battleGroup = new CreepsGroup(lvl + 2)
					else
						let building = incomeBuilding.getBuilding()
						battleGroup = new GuardsGroup(building)
		
					incomeBuilding.setBattleGroup(battleGroup)
					let battleArea = getRandomBattleArea()
					let battle = new BattleForIncomeBuilding(incomeBuilding, battleArea)
					battleGroup.createGroupAtRect(battleArea.enemiesStartPoint.withRadiusRect(300))
					battlesController.add(battle)
					battle.enterPlayerIntoBattle(enterPlayer)
				
	function restoreCampsIterator()
		doPeriodically(60) cb ->
			let camps = mapState.creepCampsToRestore
			if camps.size() > 0
				real minDistance = 99999
				CreepCamp campToRestore = camps.get(0)
				let iterator = camps.iterator()
				for camp from iterator
					let distance = camp.getPos().distanceTo(MapState.centerOfGlobalMap)
					if distance < minDistance
						minDistance = distance
						campToRestore = camp
				iterator.close()
				createGroupForCamp(campToRestore)
				mapState.creepCampsToRestore.remove(campToRestore)
				setCreepsUpgradesLevel()
				createNewMapItem()

	private function initialCreateMapItems()
		let pNum = playersInstances.getAlivePlayersNum()
		for i = 0 to pNum * 100
			createNewMapItem()

	private function createNewMapItem()
		// TODO: optimize it
		// let r = gg_rct_GlobalMapAreaForDropItems
		// let rvec = vec2(GetRandomReal(r.getMinX(), r.getMaxX()), GetRandomReal(r.getMinY(), r.getMaxY()))
		// let rrec = rvec.withRadiusRect(100)
		// print("wat?")
		let loc = GetRandomLocInRect(gg_rct_GlobalMapAreaForDropItems)
		CreateItemLoc(TREASURE_ID, loc)
		// if IsTerrainPathableBJ(loc, PATHING_TYPE_WALKABILITY)
		// 	print("create at" + loc.getHandleId().toCharsetString())
		// 	CreateItemLoc(TREASURE_ID, loc)
		// else
		// 	print("reload")
		// 	createNewMapItem()

	private function createGroupForEntity(EntityBattleFor entity) returns CreepsGroup
		let pos = entity.getPos()
		let lvl = InitGlobalMapEntities.getLevelByDistance(pos)
		let creepsGroup = new CreepsGroup(lvl)
		entity.setBattleGroup(creepsGroup)
		return creepsGroup

	private function createGroupForCamp(CreepCamp creepCamp)
		let creepsGroup = createGroupForEntity(creepCamp)
		let unitOnMap = creepsGroup.createWarlordOnMapAtPos(creepCamp.getPos())
		creepCamps.put(unitOnMap, creepCamp)

	private function setCreepsUpgradesLevel()
		let lvl = mapState.getIncreasedLevel()
		let upgradeLvl = (lvl / 2).toInt()
		let p = players[PLAYER_NEUTRAL_AGGRESSIVE]
		SetPlayerTechResearched(p, CREEP_HP_UPGRADE_ID, upgradeLvl)
		SetPlayerTechResearched(p, CREEP_DEFENCE_UPGRADE_ID, upgradeLvl)
		SetPlayerTechResearched(p, CREEP_DAMAGE_UPGRADE_ID, upgradeLvl)

	function giveIncomeIterator()
		let goldPerGoldMine = 10
		let reputationPerCamp = 1
		doPeriodically(10) cb ->
			let iterator = playersInstances.instancesList.iterator()
			for pi from iterator
				let p = pi.getPlayer()
				// Gold Mines
				let g = GetUnitsOfPlayerAndTypeId(p, INCOME_GOLD_MINE_ID)
				let goldAmount = g.size() * goldPerGoldMine
				if goldAmount > 0
					p.addGold(goldAmount)
					printTimedToPlayer(color(228, 127, 18).toColorString() + "Coins income +" + goldAmount.toString() + "|r", 3, p)
				g.destr()

				// Reputation Camps
				let c = GetUnitsOfPlayerAndTypeId(p, INCOME_CAMP_ID)
				let repAmount = c.size() * reputationPerCamp
				if repAmount > 0
					p.addLumber(repAmount)
					printTimedToPlayer(color(82, 158, 216).toColorString() + "Reputation income +" + repAmount.toString() + "|r", 3, p)
				c.destr()

			iterator.close()
	
	private function listenForGettingItems()
		EventListener.add(EVENT_PLAYER_UNIT_PICKUP_ITEM) ->
			if GetManipulatedItem().getTypeId() == TREASURE_ID
				GetManipulatedItem().remove()
				new TreasureChooseRewardDialog()
					..display(GetTriggerPlayer(), true)
