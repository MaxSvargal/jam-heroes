package BattlesController

import Battle
import CreepsGroup
import BattleArea
import HashList
import ClosureTimers
import Players

class BattlesController
	constant activeBattles = new HashList<Battle>()

	construct()
		listenForBattlesStates()

	function create(CreepsGroup creepsGroup, BattleArea battleArea) returns Battle
		let battle = new Battle(creepsGroup, battleArea)
		activeBattles.add(battle)
		return battle

	function listenForBattlesStates()
		doPeriodically(2) cb ->
			let battlesIterator = activeBattles.iterator()
			for battle from battlesIterator
				// When no players in battle
				if battle.playersInBattle.size() == 0
					activeBattles.remove(battle)
					destroy battle
					break
				
				let playersIterator = battle.playersInBattle.iterator()
				// When all players is allies, just victory all
				if Players.isAllPlayersAllies(battle.playersInBattle)
				and not battle.creepsGroup.isGroupAlive()
					battle.creepsGroup.defeat()
					for p from playersIterator
						// player victory
						p.battleVictory()
						battle.playersInBattle.remove(p)
						battle.entityBattleFor.defeat(p)
						// TODO: drop items on the map and hero needs to move to exit
						// TODO: move method to player instead of droptable?
						battle.dropRandomItemAtPos(p.castleHeroPoint)
						//dropRandomItemAtPos(campGroup.warlord.getPos())
				// When enemies players in battle
				else
					for p from playersIterator
						if not p.isAllGroupAlive()
							// player defeat
							p.battleDefeat()
							battle.playersInBattle.remove(p)

				playersIterator.close()
			battlesIterator.close()

public constant battlesController = new BattlesController()