package BattleArea

import HashList

public class BattleArea
  rect r
  vec2 heroStartPoint
  vec2 enemiesStartPoint
  bool isInUse

  construct(rect r, vec2 heroStartPoint, vec2 enemiesStartPoint)
    this.r = r
    this.heroStartPoint = heroStartPoint
    this.enemiesStartPoint = enemiesStartPoint

  function clean()
    let g = GetUnitsInRectAll(r)
    let iterator = g.iterator()
    for u from iterator
      u.remove()
    iterator.close()
    g.destr()

  function setUse(bool status)
    isInUse = status

public let battleAreaJungles = new BattleArea(
  gg_rct_BattleAreaJungles,
  gg_rct_BattleAreaJunglesSpawnHero.getCenter(),
  gg_rct_BattleAreaJunglesSpawnCreeps.getCenter())

public let battleAreaDesert = new BattleArea(
  gg_rct_BattleAreaDesert,
  gg_rct_BattleAreaDesertSpawnHero.getCenter(),
  gg_rct_BattleAreaDesertSpawnCreeps.getCenter())

public let battleAreaForest = new BattleArea(
  gg_rct_BattleAreaForestWeather,
  gg_rct_BattleAreaForestSpawnHero.getCenter(),
  gg_rct_BattleAreaForestSpawnCreeps.getCenter())

public let battleAreaBridge = new BattleArea(
  gg_rct_BattleAreaBridge,
  gg_rct_BattleAreaBridgeHero.getCenter(), // TODO: fix naming
  gg_rct_BattleAreaBridgeSpawnCreeps.getCenter())

public let battleAreaBeach = new BattleArea(
  gg_rct_BattleAreaBeach,
  gg_rct_BattleAreaBeachSpawnHero.getCenter(),
  gg_rct_BattleAreaBeachSpawnCreeps.getCenter())

public let battleAreas = new HashList<BattleArea>()
  ..add(battleAreaJungles)
  ..add(battleAreaDesert)
  ..add(battleAreaForest)
  ..add(battleAreaBridge)
  ..add(battleAreaBeach)

public function getRandomBattleArea() returns BattleArea
  let randomArea = battleAreas.get(GetRandomInt(0, battleAreas.size() - 1))
  // TODO: If all areas is in use? Maybe make 12 areas to fix it?
  return randomArea.isInUse ? getRandomBattleArea() : randomArea
