package Players

import HashSet
import HashMap
import LinkedList
import PlayerInstance

constant playerToCastleRect = new HashMap<int, rect>()
	..put(1, Rect(13115, -13290, 15166, -11460))

constant playerToCastleHeroPosRect = new HashMap<int, rect>()
	..put(1, gg_rct_Player0CastleHero)

constant playerToCastleCommonShopsRect = new HashMap<int, rect>()
	..put(1, gg_rct_Player0CastleShop0)

constant playerToCastleRecieptsShopsRect = new HashMap<int, rect>()
	..put(1, gg_rct_Player0CastleShop1)

public class Players
	constant HashMap<int, PlayerInstance> instances = new HashMap<int, PlayerInstance>()
	constant HashList<PlayerInstance> instancesList = new HashList<PlayerInstance>()

	construct()
		for i = 0 to 11
			let instance = new PlayerInstance(players[i])
				..setVisibleRect(playerToCastleRect.get(i))
				..setPositionOfHeroInCastle(playerToCastleHeroPosRect.get(i))
				..createShopsOnRects(playerToCastleCommonShopsRect.get(i), playerToCastleRecieptsShopsRect.get(i))

			instances.put(players[i].getId(), instance)
			instancesList.add(instance)

	static function isAllPlayersAllies(HashSet<PlayerInstance> playersInstances) returns bool
		let alliesStates = new LinkedList<bool>()
		let firstPlayer = playersInstances.get(0)
		let playersIterator = playersInstances.iterator()..next()
		for p from playersIterator
			alliesStates.add(firstPlayer.isAllyOf(p.getPlayer()))
		playersIterator.close()
		let isNotAllAllies = alliesStates.has(false)
		destroy alliesStates
		return not isNotAllAllies

	function getAlivePlayersNum() returns int
		int inGame = 0
		let itr = instancesList.iterator()
		for i from itr
			if i.getPlayer().isIngame()
				inGame++
		itr.close()
		return inGame

	function get(int playerId) returns PlayerInstance
		return instances.get(playerId)

public constant playersInstances = new Players()
