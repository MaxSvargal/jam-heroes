package Creeps

import HashList
import HashMap
import LinkedList

import CreepDefinition
import CreepWarlordDefinition
import CreepUnitDefinition
import CreepWarlordOnMapDefinition
import CompileItemGuardDefinition
import GuardUnitsRelations

import Crabs
import Makrura
import Murlocs
import SeaElementals

import Bosses

abstract class CallbackCreep
	abstract function call(CreepDefinition c)

abstract class CallbackWarlord
	abstract function call(CreepWarlordDefinition c)

class Creeps
	constant creepsLists = new HashList<HashList<CreepDefinition>>()
		..add(crabsCreepsToCompile)
		..add(makruraCreepsToCompile)
		..add(murlocCreepsToCompile)
		..add(seaElementalsCreepsToCompile)
		//
		..add(bossesCreepsToCompile)

	constant warlordsLists = new HashList<HashList<CreepWarlordDefinition>>()
		..add(crabsWarlordsToCompile)
		..add(makruraWarlordsToCompile)
		..add(murlocWarlordsToCompile)
		..add(seaElementalsWarlordsToCompile)
	
	constant bossesLists = new HashList<HashList<CreepWarlordDefinition>>()
		..add(bossesWarlordsToCompile)

	constant creepToLevelList = new IterableMap<int, int>()
	constant warlordsToLevelList = new IterableMap<int, int>()
	constant warlordsToMapList = new IterableMap<int, int>()
	constant bossesToLevelList = new IterableMap<int, int>()

	construct()
		fillCreepsList(creepsLists)
		fillWarlordsList(warlordsLists)
		fillWarlordsToOnMapUnitsRelations(warlordsLists)
		fillBossesList(bossesLists)

	private function fillCreepsList(HashList<HashList<CreepDefinition>> list)
		iterateListOfList(list) c ->
			creepToLevelList.put(c.getId(), c.getLevel())

	private function fillWarlordsList(HashList<HashList<CreepWarlordDefinition>> list)
		iterateListOfList(list) w ->
			warlordsToLevelList.put(w.getId(), w.getLevel())

	private function fillBossesList(HashList<HashList<CreepWarlordDefinition>> list)
		iterateListOfList(list) w ->
			bossesToLevelList.put(w.getId(), w.getLevel())

	private function fillWarlordsToOnMapUnitsRelations(HashList<HashList<CreepWarlordDefinition>> list)
		iterateListOfList(list) w ->
			warlordsToMapList.put(w.getId(), w.getOnMapId())

	private function getRandomUnitOfLevel(IterableMap<int, int> hMap, int level, int min, int max) returns int
		let iterator = hMap.iterator()
		let minLvl = level + min
		let maxLvl = level + max
		let list = new LinkedList<int>()
		for uId from iterator
			let lvl = hMap.get(uId)
			if lvl >= minLvl and lvl <= maxLvl
				list.add(uId)
		iterator.close()
		if list.size() == 0
			return hMap.get(0)
		else
			return list..shuffle().get(0)

	function getRandomWarlordIdOfLevel(int level) returns int
		return getRandomUnitOfLevel(warlordsToLevelList, level, 2, 4)

	function getRandomRegularIdOfLevel(int level) returns int
		return getRandomUnitOfLevel(creepToLevelList, level, 0, 2)

	function getRandomBossIdOfLevel(int level) returns int
		return getRandomUnitOfLevel(bossesToLevelList, level, 0, 5)

	function getOnMapUnitIdByBattleId(int id) returns int
		return warlordsToMapList.get(id)

	private function iterateListOfList(HashList<HashList<CreepDefinition>> list, CallbackCreep cb)
		let listListItr = list.iterator()
		for l from listListItr
			let listItr = l.iterator()
			for i from listItr
				cb.call(i)
			listItr.close()
		listListItr.close()

	private function iterateListOfList(HashList<HashList<CreepWarlordDefinition>> list, CallbackWarlord cb)
		let listListItr = list.iterator()
		for l from listListItr
			let listItr = l.iterator()
			for i from listItr
				cb.call(i)
			listItr.close()
		listListItr.close()


public constant creeps = new Creeps()


@compiletime function gen()
	let creepsItr = creeps.creepsLists.iterator()
	for list from creepsItr
		let itr = list.iterator()
		for i from itr
			new CreepUnitDefinition(i)
		itr.close()
	creepsItr.close()

	let warlordsItr = creeps.warlordsLists.iterator()
	for list from warlordsItr
		let itr = list.iterator()
		for w from itr
			new CreepUnitDefinition(w)
			new CreepWarlordOnMapDefinition(w)
			new CompileItemGuardDefinition(w)
		itr.close()
	warlordsItr.close()

	let bossesItr = creeps.bossesLists.iterator()
	for list from bossesItr
		let itr = list.iterator()
		for b from itr
			new CreepUnitDefinition(b)
			new CreepWarlordOnMapDefinition(b)
		itr.close()
	bossesItr.close()

init
	let warlordsItr = creeps.warlordsLists.iterator()
	for list from warlordsItr
		let itr = list.iterator()
		for w from itr
			unitIdToGuardRelations.put(w.getId(), w.getItemId())
			itemIdToGuardUnitRelations.put(w.getItemId(), w.getId())
		itr.close()
	warlordsItr.close()