package Battle

import OrderIds
import ClosureTimers
import BattleArea
import Players
import CreepCampGroup
import DropTables
import HashSet
import PlayerConfigurator
import LinkedList

public class Battle
	constant playersInBattle = new HashSet<PlayerConfigurator>()
	BattleArea battleArea
	CreepCampGroup campGroup

	construct(CreepCampGroup campGroup, BattleArea battleArea)
		this.battleArea = battleArea
		this.campGroup = campGroup
		createCampGroup()
		listenForState()

	private function isAllPlayersAllies() returns bool
		let alliesStates = new LinkedList<bool>()
		let firstPlayer = playersInBattle.get(0)
		let playersIterator = playersInBattle.iterator()..next()
		for p from playersIterator
			alliesStates.add(firstPlayer.isAllyOf(p.getPlayer()))
		playersIterator.close()
		let isNotAllAllies = alliesStates.has(false)
		destroy alliesStates
		return not isNotAllAllies

	private function checkAndSetPlayersStates() returns bool
		let playersIterator = playersInBattle.iterator()
		for p from playersIterator
			if not p.isAllGroupAlive()
				onDefeat(p)
			else if isAllPlayersAllies()
			and not campGroup.isGroupAlive()
				onVictory(p)
		playersIterator.close()
		return playersInBattle.size() == 0

	private function listenForState()
		doPeriodically(2) cb ->
			if checkAndSetPlayersStates()
				destroy cb
				destroy this

	function createCampGroup()
		// TODO: get battle area by tile under creep
		campGroup
			.createGroupAtRect(battleArea.enemiesStartPoint.withRadiusRect(300))
			..pointOrderById(Orders.attack, battleArea.heroStartPoint)

	function dropRandomItemAtPos(vec2 pos) returns item
		let dropTable = new GenerateDropTable()
		let itemId = dropTable.getDropTable().getRandomItem()
		destroy dropTable
		if itemId != 0
			return createItem(itemId, pos)
		else
			return null

	function enterPlayerIntoBattle(player p)
		let playerInstance = playersInstances.get(p.getId())
		if playerInstance != null
			playerInstance.startBattleAt(battleArea.heroStartPoint)
			playersInBattle.add(playerInstance)
		else
			printLog(Loglevel.ERROR, "Player class instance does not found for player " + p.getName() + " and id " + p.getId().toString())

	function onVictory(PlayerConfigurator p)
		p.battleVictory()
		playersInBattle.remove(p)
		// TODO: drop items on the map and hero needs to move to exit
		// TODO: move method to player instead of droptable?
		dropRandomItemAtPos(p.castleHeroPoint)
		//dropRandomItemAtPos(campGroup.warlord.getPos())

	function onDefeat(PlayerConfigurator p)
		p.battleDefeat()
		playersInBattle.remove(p)

	ondestroy
		battleArea.clean()
		// destroy campGroup
		destroy playersInBattle