package Balls

import ChannelAbilityPreset
import ClosureForGroups
import Abilities
import Projectile
import Objects
import Collision

constant RealLevelClosure SPELL_RADIUS = lvl -> 128. + lvl * 32
constant RealLevelClosure SPELL_RANGE = lvl -> 500. + lvl * 30
constant SPEED = 25.75
constant MISSLE_TYPE = Abilities.redDragonMissile // lordofFlameMissile

constant SPELL_ICON = "PASShadowStrike"
constant SPELL_NAME = "Ball"
constant SPELL_HOTKEY = "W"
constant SPELL_TT_NORMAL = SPELL_NAME + " [" + SPELL_HOTKEY + "]"
constant SPELL_TT_EXTENDED = "Launches a giant fireball that creates a powerful explosion at the landing point. Damage all units in radius." +
	color(255, 184, 30).toColorString() + "\nDamage formula: (base + (strength * 2) + (intellect * 3)) * level"

public constant BALLS_ID = compiletime(ABIL_ID_GEN.next())

@compiletime function gen()
	new ChannelAbilityPreset(BALLS_ID, 20, true)
		..presetIcon(SPELL_ICON)
		..setName(SPELL_NAME)
		..presetHotkey(SPELL_HOTKEY)
		..setTooltipLearn(SPELL_TT_NORMAL)
		..setTooltipLearnExtended(SPELL_TT_EXTENDED)
		..presetTooltipNormal(lvl -> SPELL_TT_NORMAL)
		..presetTooltipNormalExtended(lvl -> SPELL_TT_EXTENDED)
		..presetTargetTypes(Targettype.POINT)
		..presetAreaofEffect(SPELL_RADIUS)
		..presetCastRange(SPELL_RANGE)
		..presetCooldown(lvl -> 5 - (lvl / 5))
		..presetManaCost(lvl -> 30 + (lvl * 5))
		..presetCastingTime(lvl -> 1.5)
		..setButtonPositionNormalX(1)
		..setButtonPositionNormalY(2)

class GiantFireball extends PhysicsProjectile
	var initialZ = 0.
	var lvl = 1

	construct(vec3 pos, player owner, angle xyAngle, vec3 target, int lvl)
		super(pos, 28., owner, xyAngle, Abilities.lichMissile)
		this.lvl = lvl
		fx..setOwner(owner, false)
		setSpeed(SPEED)
		gravity = 0
		initialZ = pos.getTerrainZ() + 18.
		registerCollidable(this, (other) -> onHit(other))
		registerCollider(this, SHAPE_SPHERE, (other) -> onHit(other))

	function onHit(Entity e)
		if e.owner.isEnemyOf(owner)
			flashEffect(Abilities.zigguratFrostMissile, pos)
			terminate()
		// 	fx.getDummy().damageTarget(child.actor, 55., ATTACK_TYPE_NORMAL)

			// if e instanceof Child
			// 	if (e castTo Child).actor.isAlive()
			// 		let child = e castTo Child
			// 		fx.getDummy().damageTarget(child.actor, 55., ATTACK_TYPE_NORMAL)
			// 		flashEffect(Abilities.frostArmorDamage, pos)
			// 		flashEffect(Objects.bloodElfSpellThiefBlood, e.getPos())
			// 		childHitSound.playOnPoint(pos)
			// 		terminate()
			// else
			// 	flashEffect(Abilities.zigguratFrostMissile, pos)
			// 	terminate()
	
	ondestroy
		flashEffect(Abilities.frostArmorDamage, pos)
		removeCollidable(this)
		removeCollider(this)

init
	EventListener.onPointCast(BALLS_ID) (unit caster, vec2 pos) ->
		let abilLvl = caster.getAbilityLevel(BALLS_ID)
		let castPos = caster.getPos().toVec3().add(0,0,48)
		let angle = castPos.angleTo2d(pos)
		let owner = caster.getOwner()
		let target = pos.withTerrainZ()
		// let damage = (caster.getBaseDamage(1) + (caster.getStr(true) * 2) + (caster.getInt(true) * 3)) * abilLvl
		new GiantFireball(castPos, owner, angle + 18.5 .fromDeg(), target, abilLvl)