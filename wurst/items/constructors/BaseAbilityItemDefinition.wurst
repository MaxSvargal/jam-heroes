package BaseAbilityItemDefinition

import ObjectIdGenerator
import AbilityObjEditing

import public BaseItemDefinition

public class BaseAbilityItemDefinition extends BaseItemDefinition
	construct(int id)
		super(id)

	construct(int id, int baseId)
		super(id, baseId)

	function setStrengthBonus(int val)
		addProp("strength", val.toString())
		addAbility(
			new AbilityDefinitionStrengthBonusPlus1(ABIL_ID_GEN.next())
				..setStrengthBonus(1, val)
				.getNewId())

	function setAgilityBonus(int val)
		addProp("agility", val.toString())
		addAbility(
			new AbilityDefinitionAgilityBonusPlus1(ABIL_ID_GEN.next())
				..setAgilityBonus(1, val)
				.getNewId())

	function setIntelligenceBonus(int val)
		addProp("intelligence", val.toString())
		addAbility(
			new AbilityDefinitionIntelligenceBonusPlus1(ABIL_ID_GEN.next())
				..setIntelligenceBonus(1, val)
				.getNewId())

	function setAttackBonus(int val)
		addProp("attack bonus", val.toString())
		addAbility(
			new AbilityDefinitionAttackBonus(ABIL_ID_GEN.next())
				..setAttackBonus(1, val)
				.getNewId())

	function setAttackSpeedIncrease(real val)
		addProp("attack speed", (val * 100).toString() + "%")
		addAbility(
			new AbilityDefinitionAttackSpeedIncrease(ABIL_ID_GEN.next())
				..setAttackSpeedIncrease(1, val)
				.getNewId())

	function setChancetoEvade(real val)
		addProp("evade chance", (val * 100).toString() + "%")
		addAbility(
			new AbilityDefinitionEvasion(ABIL_ID_GEN.next())
				..setChancetoEvade(1, val)
				.getNewId())

	function setDefenceBonus(int val)
		addProp("defence bonus", val.toString())
		addAbility(
			new AbilityDefinitionDefenseBonusPlus1(ABIL_ID_GEN.next())
				..setDefenseBonus(1, val)
				.getNewId())

	function setMaxManaGained(int val)
		// TODO: does not work!
		addProp("mana gained", val.toString())
		addAbility(
			new AbilityDefinitionAImm(ABIL_ID_GEN.next())
				..setMaxManaGained(1, val)
				.getNewId())

	function setMaxLifeGained(int val)
		// TODO: does not work
		addProp("life gained", val.toString())
		addAbility(
			new AbilityDefinitionMaxLifeBonusGreater(ABIL_ID_GEN.next())
				..setMaxLifeGained(1, val)
				.getNewId())

	function setMovementSpeedBonus(int val)
		addProp("movement speed", val.toString())
		addAbility(
			new AbilityDefinitionMoveSpeedBonus(ABIL_ID_GEN.next())
				..setMovementSpeedBonus(1, val)
				.getNewId())

	function setMovementSpeedIncrease(real val)
		// aura?
		print(val)

	function setAllStatsBonus(int val)
		addProp("all stats", val.toString())
		addAbility(
			new AbilityDefinitionAllPlus1(ABIL_ID_GEN.next())
				..setIntelligenceBonus(1, val)
				..setAgilityBonus(1, val)
				..setStrengthBonus(1, val)
				.getNewId())

	// function setLifeRegenerationIncrease(real val)
	// 	addProp("life regeneration", val.toString() + "%")
	// 	addAbility(
	// 		new AbilityDefinitionDeathKnightUnholyAura(ABIL_ID_GEN.next())
	// 			..setLifeRegenerationIncrease(1, val)
	// 			..setMovementSpeedIncrease(1, 0)
	// 			..setAreaofEffect(1, 1)
	// 			..setArtTarget("")
	// 			.getNewId())
	
	function setHitPointsRegeneratedPerSecond(int val)
		addProp("life regeneration", val.toString() + " hp/s")
		addAbility(
			new AbilityDefinitionRegenLife(ABIL_ID_GEN.next())
				..setHitPointsRegeneratedPerSecond(1, val)
				.getNewId())
	
	function setManaRegenerationBonus(real val)
		addProp("mana regeneration", val.toString() + "%")
		addAbility(
			new AbilityDefinitionItemRegenMana(ABIL_ID_GEN.next())
				..setManaRegenerationBonusasfractionofnormal(1, val)
				.getNewId())
	
	function setSpellDamageReduction(real val)
		addProp("spell damage reduction", val.toString() + "%")
		addAbility(
			new AbilityDefinitionRunedBracers(ABIL_ID_GEN.next())
				..setDamageBonus(1, 0)
				..setDamageReduction(1, val)
				.getNewId())
	
	function setChancetoCriticalStrike(real chance, real multiplier, real damageBonus)
		addProp(
			"crit chance",
			(chance * 100).toString() + "%" +
				(multiplier != 2 ? " to deal x" + multiplier.toString() : "") +
				(damageBonus == 0 ? "" : " and additional " + damageBonus.toString()) + " damage")
		addAbility(
			new AbilityDefinitionCriticalStrikecreep(ABIL_ID_GEN.next())
				..setDamageMultiplier(1, multiplier)
				..setChancetoCriticalStrike(1, chance)
				..setDamageBonus(1, damageBonus)
				.getNewId())

	function setPoisonAttack(real damagePerSecond, real attackSpeedFactor, real movementSpeedFactor)
		addProp("poison effect", damagePerSecond.toString() + " hp/s")
		if attackSpeedFactor != 0
			addProp("decrease enemy attack speed", attackSpeedFactor.toString() + "%")
		if movementSpeedFactor != 0
			addProp("decrease enemy movement speed", movementSpeedFactor.toString() + "%")

		addAbility(
			new AbilityDefinitionPoisonAttack(ABIL_ID_GEN.next())
				..setAttackSpeedFactor(1, attackSpeedFactor)
				..setDamageperSecond(1, damagePerSecond)
				..setMovementSpeedFactor(1, movementSpeedFactor)
				.getNewId())

	function setLifeRegenerated(real val)
		addProp("life regenerated", val.toInt().toString())
		addAbility(
			new AbilityDefinitionPotionofRejuvI(ABIL_ID_GEN.next())
				..setLifeRegenerated(1, val)
				.getNewId())

	function setManaRegenerated(real val)
		addProp("mana regenerated", val.toInt().toString())
		addAbility(
			new AbilityDefinitionPotionofRejuvII(ABIL_ID_GEN.next())
				..setManaRegenerated(1, val)
				.getNewId())