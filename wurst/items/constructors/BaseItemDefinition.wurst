package BaseItemDefinition

import LinkedList
import HashMap
import StringUtils
import ObjectIds

constant RECIEPT_GOLD_COST = 50
constant RECIEPT_LUMBER_COST = 1
constant FOR_RECIEPT_COST_MULTIPLY = 1.3

public enum ItemType
	COMMON
	UNCOMMON
	RARE
	EPIC
	LEGENDARY
	UNIQUE

function getColorOfItemType(ItemType itemType) returns string
	switch itemType
		case COMMON
			return ""
		case UNCOMMON
			return color(31,191,0).toColorString()
		case RARE
			return color(60, 110, 255).toColorString()
		case EPIC
			return color(190, 0, 254).toColorString()
		case LEGENDARY
			return color(254,137,13).toColorString()
		case UNIQUE
			return color(236, 220, 0).toColorString()
		default
			return ""

public class BaseItemDefinition
	int id
	int baseId
	int recieptId
	LinkedList<int> abilities = new LinkedList<int>()
	IterableMap<string, string> props = new IterableMap<string, string>()
	LinkedList<BaseItemDefinition> requiredItems = new LinkedList<BaseItemDefinition>()
	ItemType itemType
	string name
	string tooltipBasic = ""
	string description = ""
	string iconPath
	boolean recieptIsset = false
	boolean recieptRequired = false
	string recieptIcon
	string recieptName
	int goldCost = 0
	int lumberCost = 0
	int recieptGoldCost = 0
	int recieptLumberCost = 0
	int numberofCharges = 0

	construct(int id)
		this.id = id
		this.baseId = 'rst1'

	construct(int id, int baseId)
		this.id = id
		this.baseId = baseId

	private function getColorOfCurrentType() returns string
		return getColorOfItemType(itemType)

	private function generateProps() returns string
		if props.size() == 0
			return ""
		let itemColor = getColorOfCurrentType()
		string tooltip = ""
		let iterator = props.iterator()
		for prop from iterator
			if props.get(prop) != "0"
				tooltip += itemColor + "+ " + props.get(prop) + "|r " + COLOR_GOLD.toColorString() + prop + "|r\n"
		return tooltip

	private function getRequiredItemsNames() returns string
		string requiredNames = ""
		let requiredNamesIterator = requiredItems.iterator()
		for reqItem from requiredNamesIterator
			requiredNames +=  "- " + reqItem.name + "\n"
		requiredNamesIterator.close()
		return requiredNames

	// =======
	// Setters
	// =======

	function setName(string name)
		this.name = name
		let str = getColorOfCurrentType() + name + "|r"
		this.name = str
		this.tooltipBasic = "Buy " + str

	function setType(ItemType itemType)
		this.itemType = itemType

	function setIcon(string name)
		string s = name
		if name.length() < 20 or not name.startsWith("ReplaceableTextures")
			 s = "ReplaceableTextures\\CommandButtons\\" + s
		if not name.endsWith(".blp")
			s += ".blp"
		iconPath = s

	function setDescription(string desc)
		description = desc

	function addAbility(int id)
		abilities.add(id)

	function addProp(string name, string val)
		props.put(name, val)

	function setRecieptIsset(int id)
		recieptIsset = true
		recieptId = id
		recieptGoldCost = RECIEPT_GOLD_COST
		recieptLumberCost = RECIEPT_LUMBER_COST
		goldCost += recieptGoldCost
		lumberCost += recieptLumberCost
		recieptName = getColorOfCurrentType() + "Reciept of " + name + "|r"
		if itemType == ItemType.UNCOMMON
			recieptIcon = "ReplaceableTextures\\CommandButtons\\BTNRecieptScrollGreen.blp"
		if itemType == ItemType.RARE
			recieptIcon = "ReplaceableTextures\\CommandButtons\\BTNRecieptScrollBlue.blp"

	function setRecieptRequired(bool status)
		recieptRequired = status

	function setCost(int goldCost, int lumberCost)
		this.goldCost = goldCost
		this.lumberCost = lumberCost

	function setRecieptCost(int goldCost, int lumberCost)
		this.recieptGoldCost = goldCost
		this.recieptLumberCost = lumberCost

	function addRequiredItem(BaseItemDefinition itemDefinition)
		requiredItems.add(itemDefinition)
		goldCost += itemDefinition.goldCost
		lumberCost += itemDefinition.lumberCost

	function setNumberOfCharges(int numberofCharges)
		this.numberofCharges = numberofCharges
		addProp("Charges", numberofCharges.toString())


	// =======
	// Getters
	// =======

	function getId() returns int
		return id

	function getRecieptId() returns int
		return recieptId

	function getGoldCost() returns int
		return recieptIsset
			? (goldCost * FOR_RECIEPT_COST_MULTIPLY).toInt()
			: goldCost

	function getLumberCost() returns int
		return recieptIsset
			? (lumberCost * FOR_RECIEPT_COST_MULTIPLY).toInt()
			: lumberCost

	function getTooltipExtended() returns string
		return description != ""
			? description + "\n\n" + generateProps()
			: generateProps()

	function getRecieptTooltipExtended() returns string
		return color(255, 100, 190).toColorString() +
		(recieptRequired ? "This receipt is required" : "This receipt is not required") +
		"|r\n" +
		description + "\n\n" +
		generateProps() + "\n" +
			color(220, 50, 50).toColorString() +
			"Requires items: \n" +
			getRequiredItemsNames()// + "|r"

	function getAbilitiesList() returns string
		return abilities.joinBy((int i) -> i.toRawCode(), ",")
